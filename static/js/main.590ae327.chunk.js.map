{"version":3,"sources":["components/Display.jsx","components/Btn.jsx","components/Controls.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","state","error","errorCheck","changeValuesInputs","e","obj","maxVal","currentTarget","value","trim","minVal","setState","props","changeStartMaxValue","display","this","counter","className","onClick","setVisibleSettings","onChange","type","React","Component","Controls","button","disabled","isDisabled","onFunc","title","buttons","incrementCounter","resetCounter","setFunc","Btn","App","parseInt","val","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.590ae327.chunk.js","sourcesContent":["import React from 'react';\r\nclass Display extends React.Component {\r\n    state = {\r\n        error: '',\r\n        errorCheck: false\r\n    }\r\n    changeValuesInputs = (e) => {\r\n\r\n        let obj = {\r\n            maxVal: e.currentTarget[0].value.trim(),\r\n            minVal: e.currentTarget[1].value.trim()\r\n        }\r\n        if (obj.maxVal > 10) {\r\n            this.setState({error: 'Max 10', errorCheck: true})\r\n        } else if (obj.maxVal < 0) {\r\n            this.setState({error: 'Min 0', errorCheck: true})\r\n        } else if (obj.minVal < 0) {\r\n            this.setState({error: 'Min 0', errorCheck: true})\r\n        } else if (obj.minVal > 10) {\r\n            this.setState({error: 'Max 10', errorCheck: true})\r\n        } else if (obj.minVal == obj.maxVal) {\r\n            this.setState({error: 'Min != Max', errorCheck: true})\r\n        } else {\r\n            this.props.changeStartMaxValue(obj);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let display = this.props.counter === this.props.maxVal ? 'Max: ' + this.props.maxVal : this.props.counter\r\n        return (\r\n            <div className=\"ShowCounter\">\r\n                {!this.state.errorCheck ?\r\n                    <div>\r\n                        {this.props.setVisibleSettings ?\r\n                            <div>\r\n                                <form onChange={this.changeValuesInputs}>\r\n                                    Max value: <input type=\"number\" value={this.props.maxVal}/>\r\n                                    Start value: <input type=\"number\" value={this.props.minVal}/>\r\n                                </form>\r\n                            </div> :\r\n                            display\r\n                        }\r\n                    </div>\r\n                    : <div><div >{this.state.error}</div>\r\n                        <button className=\"errorButtonInDisplay\"  onClick={()=>this.setState({errorCheck: false})}>OK</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Display;","import React from 'react';\r\nclass Controls extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className={this.props.button.counter === this.props.maxVal ? 'buttonColor' : ''}\r\n                        disabled={this.props.button.isDisabled ? true : false}\r\n                        onClick={()=>this.props.button.onFunc(true)}>{this.props.button.isDisabled?this.props.button.disabled:this.props.button.title}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Controls;","import React from 'react';\r\nimport Btn from \"./Btn\";\r\nclass Controls extends React.Component {\r\n    render() {\r\n        let buttons = [\r\n            {\r\n                title: 'INC',\r\n                isDisabled: this.props.isDisabled,\r\n                onFunc: this.props.incrementCounter,\r\n                disabled: 'DISABLED',\r\n                counter: this.props.counter\r\n            },\r\n            {\r\n                title: 'RESET',\r\n                isDisabled: this.props.counter === this.props.minVal ? true : false,\r\n                onFunc: this.props.resetCounter,\r\n                disabled: 'DISABLED'\r\n            },\r\n            {\r\n                title: 'SET',\r\n                onFunc: this.props.setFunc,\r\n                isDisabled: this.props.counter > this.props.minVal ? true : false,\r\n                disabled: 'DISABLED'\r\n\r\n            }\r\n        ]\r\n        return (\r\n            <div >\r\n                {this.props.setVisibleSettings ?\r\n                    <div>\r\n                        <button className=\"SET\" onClick={() => buttons[2].onFunc(false)}>SET</button>\r\n                    </div> :\r\n                    <div className=\"Buttons\"><Btn {...this.props} button={buttons[0]}/>\r\n                        <Btn {...this.props} button={buttons[1]}/>\r\n                        <Btn {...this.props} button={buttons[2]}/></div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Controls;","import React from 'react';\nimport './App.css';\nimport Display from \"./components/Display\";\nimport Controls from \"./components/Controls\";\n\nclass App extends React.Component {\n    state = {\n        counter: 0,\n        isDisabled: false,\n        maxVal: 5,\n        minVal: 0,\n        setVisibleSettings:false\n    }\n\n    incrementCounter = () => {\n        if(this.state.counter===this.state.maxVal-1){\n            this.setState({\n                isDisabled: true,\n            })\n        }\n\n        this.setState({\n            counter:++this.state.counter\n        })\n    }\n    changeStartMaxValue=(obj)=>{\n        this.setState({\n            maxVal: parseInt(obj.maxVal),\n            minVal: parseInt(obj.minVal)\n        })\n    }\n    resetCounter = () => {\n        this.setState({\n            counter: 0,\n            isDisabled: false\n        })\n    }\n   setFunc = (val) => {\n        this.setState({\n            setVisibleSettings:val,\n            counter:this.state.minVal\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"Wrapper\">\n                    <div className=\"Display\">\n                        <Display changeStartMaxValue={this.changeStartMaxValue} setVisibleSettings={this.state.setVisibleSettings} counter={this.state.counter} maxVal={this.state.maxVal} minVal={this.state.minVal}/>\n                    </div>\n                    <div>\n                        <Controls className=\"Controls\" setVisibleSettings={this.state.setVisibleSettings} setFunc={this.setFunc} counter={this.state.counter} maxVal={this.state.maxVal} minVal={this.state.minVal}\n                                  isDisabled={this.state.isDisabled} incrementCounter={this.incrementCounter}\n                                  resetCounter={this.resetCounter}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}