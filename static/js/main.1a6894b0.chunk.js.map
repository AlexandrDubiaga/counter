{"version":3,"sources":["components/Display.jsx","components/Btn.jsx","components/Controls.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","state","error","errorCheck","changeValuesInputs","e","obj","maxVal","currentTarget","value","trim","minVal","setState","props","changeStartMaxValue","display","this","counter","setVisibleSettings","onChange","className","type","React","Component","Controls","button","disabled","isDisabled","onClick","onFunc","title","buttons","incrementCounter","resetCounter","setFunc","Btn","App","parseInt","val","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a6894b0.chunk.js","sourcesContent":["import React from 'react';\r\nclass Display extends React.Component {\r\n    state = {\r\n        error: '',\r\n        errorCheck: false\r\n    }\r\n    changeValuesInputs = (e) => {\r\n\r\n        let obj = {\r\n            maxVal: e.currentTarget[0].value.trim(),\r\n            minVal: e.currentTarget[1].value.trim()\r\n        }\r\n        if (obj.maxVal > 10) {\r\n            this.setState({error: 'Max 10', errorCheck: true})\r\n        } else if (obj.maxVal < 0) {\r\n            this.setState({error: 'Min 0', errorCheck: true})\r\n        } else if (obj.minVal < 0) {\r\n            this.setState({error: 'Min 0', errorCheck: true})\r\n        } else if (obj.minVal > 10) {\r\n            this.setState({error: 'Max 10', errorCheck: true})\r\n        } else if (obj.minVal == obj.maxVal) {\r\n            this.setState({error: 'Min != Max', errorCheck: true})\r\n        } else {\r\n            this.setState({errorCheck: false})\r\n            this.props.changeStartMaxValue(obj);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let display = this.props.counter === this.props.maxVal ? 'Max: ' + this.props.maxVal : this.props.counter\r\n        return (\r\n            <div>\r\n                    <div>\r\n                        {this.props.setVisibleSettings ?\r\n                            <div>\r\n                                <form onChange={this.changeValuesInputs}>\r\n                                    Max value: <input className={this.state.errorCheck?'errorInput':''} type=\"number\" value={this.props.maxVal}/>\r\n                                    Start value: <input className={this.state.errorCheck?'errorInput':''} type=\"number\" value={this.props.minVal}/>\r\n                                </form>\r\n                            </div> :\r\n                            display\r\n                        }\r\n                    </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Display;","import React from 'react';\r\nclass Controls extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className={this.props.button.counter === this.props.maxVal ? 'buttonColor' : ''}\r\n                        disabled={this.props.button.isDisabled ? true : false}\r\n                        onClick={()=>this.props.button.onFunc(true)}>{this.props.button.isDisabled?this.props.button.disabled:this.props.button.title}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Controls;","import React from 'react';\r\nimport Btn from \"./Btn\";\r\nclass Controls extends React.Component {\r\n    render() {\r\n        let buttons = [\r\n            {\r\n                title: 'INC',\r\n                isDisabled: this.props.isDisabled,\r\n                onFunc: this.props.incrementCounter,\r\n                disabled: 'DISABLED',\r\n                counter: this.props.counter\r\n            },\r\n            {\r\n                title: 'RESET',\r\n                isDisabled: this.props.counter === this.props.minVal ? true : false,\r\n                onFunc: this.props.resetCounter,\r\n                disabled: 'DISABLED'\r\n            },\r\n            {\r\n                title: 'SET',\r\n                onFunc: this.props.setFunc,\r\n                isDisabled: this.props.counter > this.props.minVal ? true : false,\r\n                disabled: 'DISABLED'\r\n\r\n            }\r\n        ]\r\n        return (\r\n            <div >\r\n                {this.props.setVisibleSettings ?\r\n                    <div>\r\n                        <button className=\"SET\" onClick={() => buttons[2].onFunc(false)}>SET</button>\r\n                    </div> :\r\n                    <div className=\"Buttons\"><Btn {...this.props} button={buttons[0]}/>\r\n                        <Btn {...this.props} button={buttons[1]}/>\r\n                        <Btn {...this.props} button={buttons[2]}/></div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Controls;","import React from 'react';\r\nimport './App.css';\r\nimport Display from \"./components/Display\";\r\nimport Controls from \"./components/Controls\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        counter: 0,\r\n        isDisabled: false,\r\n        maxVal: 5,\r\n        minVal: 0,\r\n        setVisibleSettings:false\r\n    }\r\n\r\n    incrementCounter = () => {\r\n        if(this.state.counter===this.state.maxVal-1){\r\n            this.setState({\r\n                isDisabled: true,\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            counter:++this.state.counter\r\n        })\r\n    }\r\n    changeStartMaxValue=(obj)=>{\r\n        this.setState({\r\n            maxVal: parseInt(obj.maxVal),\r\n            minVal: parseInt(obj.minVal)\r\n        })\r\n    }\r\n    resetCounter = () => {\r\n        this.setState({\r\n            counter: 0,\r\n            isDisabled: false,\r\n            minVal:0\r\n        })\r\n    }\r\n   setFunc = (val) => {\r\n        this.setState({\r\n            setVisibleSettings:val,\r\n            counter:this.state.minVal\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"Wrapper\">\r\n                    <div className=\"Display\">\r\n                        <Display changeStartMaxValue={this.changeStartMaxValue} setVisibleSettings={this.state.setVisibleSettings} counter={this.state.counter} maxVal={this.state.maxVal} minVal={this.state.minVal}/>\r\n                    </div>\r\n                    <div>\r\n                        <Controls className=\"Controls\" setVisibleSettings={this.state.setVisibleSettings} setFunc={this.setFunc} counter={this.state.counter} maxVal={this.state.maxVal} minVal={this.state.minVal}\r\n                                  isDisabled={this.state.isDisabled} incrementCounter={this.incrementCounter}\r\n                                  resetCounter={this.resetCounter}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}